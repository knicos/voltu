# Gitlab waits until all jobs for a stage are completed before moving to next
# stage, so using stages for Windows/Linux builds would wait until the other is
# finished before continuing.
#
# Perhaps relevant in future https://gitlab.com/gitlab-org/gitlab-ce/issues/47063

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CMAKE_ARGS_WINDOWS: '-DCMAKE_GENERATOR_PLATFORM=x64 -DPORTAUDIO_DIR="D:/Build/portaudio" -DEigen3_DIR="C:/Program Files (x86)/Eigen3/share/eigen3/cmake" -DOpenCV_DIR="D:/Build/opencv/build/install" -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2" -DWITH_OPENVR=TRUE -DOPENVR_DIR="D:/Build/OpenVRSDK" -DWITH_CERES=FALSE'

stages:
 - all
 - deploy

#### Linux

linux:
  stage: all
  tags:
    - linux
  variables:
    FTL_LIB: ../../build/SDK/C/libftl-dev.so
    LD_LIBRARY_PATH: /opt/pylon/lib/
#  before_script:
#    - export DEBIAN_FRONTEND=noninteractive
#    - apt-get update -qq && apt-get install -y -qq g++ cmake git
#    - apt-get install -y -qq libopencv-dev libgoogle-glog-dev liburiparser-dev libreadline-dev libmsgpack-dev uuid-dev
  script:
    - mkdir build
    - cd build
    - cmake .. -DWITH_OPTFLOW=TRUE -DUSE_CPPCHECK=FALSE -DBUILD_CALIBRATION=TRUE -DWITH_CERES=TRUE -DCMAKE_BUILD_TYPE=Release -DCPACK_GENERATOR=DEB
    - make
    - make package
    - ctest --output-on-failure
    - cd ../SDK/Python
    - python3 -m unittest discover test

webserver-deploy:
  only:
    - master
  stage: deploy
  tags:
    - linux
  variables:
    NODE_SERVER: '10.0.0.9'
  script:
    - npm install web-service
    - browserify web-service/public/js/index.js -o web-service/public/js/bundle.js
    - rsync -vr --delete web-service/ nodejs@${NODE_SERVER}:/srv/nodejs/web-service
    - ssh nodejs@${NODE_SERVER} -- "npm install web-service && pm2 restart web-service"
    - doxygen
    - rsync -vr --delete doc/ nodejs@${NODE_SERVER}:/srv/nodejs/doc

### Windows

.build-windows: &build-windows
    - 'call "D:/Program Files/Visual Studio 2019/VC/Auxiliary/Build/vcvars64.bat"'
    - mkdir build
    - cd build
    - echo cmake %CMAKE_ARGS% %CMAKE_ARGS_WINDOWS% -DNANOGUI_DIR="C:/Program Files (x86)/NanoGUI" ..
    - cmake %CMAKE_ARGS% %CMAKE_ARGS_WINDOWS% -DREALSENSE_DIR="C:/Program Files (x86)/Intel RealSense SDK 2.0" -DNANOGUI_DIR="C:/Program Files (x86)/NanoGUI" -DOPUS_DIR="C:/Program Files (x86)/Opus" ..
    - devenv ftl.utu.fi.sln /build Release
    - rmdir /q /s "%DEPLOY_DIR%/%CI_COMMIT_REF_SLUG%"
    - mkdir "%DEPLOY_DIR%/%CI_COMMIT_REF_SLUG%"
    - 'copy "applications\vision\Release\ftl-vision.exe" "%DEPLOY_DIR%\%CI_COMMIT_REF_SLUG%"'
    - 'copy "applications\calibration\Release\ftl-calibrate.exe" "%DEPLOY_DIR%\%CI_COMMIT_REF_SLUG%"'
    - 'copy "applications\gui\Release\ftl-gui.exe" "%DEPLOY_DIR%\%CI_COMMIT_REF_SLUG%"'

windows-vision:
  except:
    - master
  stage: all
  variables:
    CMAKE_ARGS: '-DENABLE_PROFILER=TRUE -DWITH_OPTFLOW=TRUE -DBUILD_VISION=TRUE -DBUILD_CALIBRATION=FALSE -DBUILDRECONSTRUCT=FALSE -DBUILDRENDERER=FALSE -DBUILD_TESTING=FALSE -DBUILD_TESTS=FALSE'
    DEPLOY_DIR: 'D:/Shared/AutoDeploy'
  tags:
    - win
  script:
    - *build-windows

windows-master:
  only:
    - master
  stage: all
  variables:
    CMAKE_ARGS: '-DWITH_OPTFLOW=TRUE'
    DEPLOY_DIR: 'D:/Shared/AutoDeploy'
  tags:
    - win
  script:
    - *build-windows
